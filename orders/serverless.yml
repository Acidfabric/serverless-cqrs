service: serverless-cqrs-orders

plugins:
  - serverless-offline-sns
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list

custom:
  dynamodb:
    start:
      migrate: true
  serverless-offline-sns:
    port: 4002
    debug: true
  serverless-offline:
    babelOptions:
      presets: ["env"]

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - "sns:*"
      Resource:
        - { "Fn::GetAtt": ["OrdersEventsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["OrdersMenuItemsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["OrdersCustomersDynamoDBTable", "Arn" ] }
        - "arn:aws:sns:us-east-1:${ssm:accountId}:orders-events"
  environment:
    TOPIC_NAME: 'orders-events'
    AWS_ACCOUNT_ID: '${ssm:accountId}'
    EVENTS_TABLE: 'orders-events-table-${self:provider.stage}'
    MENU_ITEMS_TABLE: 'orders-menu-items-table-${self:provider.stage}'
    CUSTOMERS_TABLE: 'orders-customers-table-${self:provider.stage}'

functions:
  openOrder:
    handler: api.handler
    events:
      - http: 'POST /orders/commands/open'
  getMenuItems:
    handler: api.handler
    events:
      - http: 'GET /menu/items'
  getCustomers:
    handler: api.handler
    events:
      - http: 'GET /customers'
  persistMenuItem:
    handler: listeners.persistMenuItem
    events:
      - sns:
          arn: 'arn:aws:sns:us-east-1:${ssm:accountId}:menu-events'
  persistCustomer:
    handler: listeners.persistCustomer
    events:
      - sns:
          arn: 'arn:aws:sns:us-east-1:${ssm:accountId}:customers-events'

resources:
  Resources:
    OrdersEventsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: 'orders-events-table-${self:provider.stage}'
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    OrdersMenuItemsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: 'orders-menu-items-table-${self:provider.stage}'
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    OrdersCustomersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: 'orders-customers-table-${self:provider.stage}'
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
